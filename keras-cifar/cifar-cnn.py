from __future__ import print_function
import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D

import os
import wandb
from wandb.keras import WandbCallback

run = wandb.init()
config = run.config
config.batch_size = 200
config.epochs = 65

class_names = ['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']
num_classes = len(class_names)

(X_train, y_train), (X_test, y_test) = cifar10.load_data()

# Convert class vectors to binary class matrices.
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

model = Sequential()
#model.add(Conv2D(28, (4, 4), padding='same',input_shape=X_train.shape[1:], activation='relu'))
#model.add(Conv2D(32, (4, 4), padding='same',input_shape=X_train.shape[1:], activation='relu'))
#model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.40))
model.add(Flatten())
model.add(Dense(90, activation='relu'))
model.add(Dropout(0.40))
model.add(Dense(num_classes, activation='softmax'))

#opt = keras.optimizers.SGD(lr=0.01)
#opt = keras.optimizers.SGD(lr=0.008, clipvalue=0.5, decay=1e-6, momentum=0.9, nesterov=True)
opt = keras.optimizers.Adam(lr=0.001, beta_1=0.91, beta_2=0.998, epsilon=None, decay=0.0, amsgrad=False)

# Let's train the model using RMSprop
model.compile(loss='categorical_crossentropy',optimizer=opt,metrics=['accuracy'])

X_train = X_train.astype('float32') / 255.
X_test = X_test.astype('float32') / 255.

#datagen = ImageDataGenerator(width_shift_range=0.1)
datagen = ImageDataGenerator(#featurewise_center=True,
                            #samplewise_center=False,
                            #featurewise_std_normalization=True,
                            #samplewise_std_normalization=False,
                            #zca_whitening=True,
                            #zca_epsilon=1e-06,
                            #rotation_range=10,
                            width_shift_range=0.13,
                            #height_shift_range=0.13,
                            #brightness_range=(0.13,0.07),
                            shear_range=0.13,
                            zoom_range=0.13,
                            #channel_shift_range=0.13,
                            #fill_mode='nearest', 
                            #cval=0.0, 
                            horizontal_flip=True,
                            #vertical_flip=False,
                            #rescale=None, 
                            #preprocessing_function=None, 
                            #data_format=None, 
                            #validation_split=0.0
)

datagen.fit(X_train)

# Fit the model on the batches generated by datagen.flow().
model.fit_generator(datagen.flow(X_train, y_train,batch_size=config.batch_size),
                        steps_per_epoch=X_train.shape[0] // config.batch_size,
                        epochs=config.epochs,
                        validation_data=(X_test, y_test),
                        workers=4,
                        callbacks=[WandbCallback(data_type="image", labels=class_names)])